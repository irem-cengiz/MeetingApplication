// <auto-generated />
using System;
using MeetingApplication.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingApplication.Migrations
{
    [DbContext(typeof(MeetingDbContext))]
    [Migration("20230701114543_tcduzenleme")]
    partial class tcduzenleme
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MeetingApplication.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeetingPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MeetingReportId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingPlatformId");

                    b.HasIndex("MeetingReportId")
                        .IsUnique()
                        .HasFilter("[MeetingReportId] IS NOT NULL");

                    b.HasIndex("MeetingSubjectId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingPerson", b =>
                {
                    b.Property<string>("TcNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("TcNo", "Id");

                    b.HasIndex("Id");

                    b.ToTable("MeetingPersons");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MeetingPlatformName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeetingPlatforms");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeetingReports");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MeetingSubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeetingSubjects");
                });

            modelBuilder.Entity("MeetingApplication.Entities.Person", b =>
                {
                    b.Property<string>("TcNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TcNo");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MeetingApplication.Entities.Meeting", b =>
                {
                    b.HasOne("MeetingApplication.Entities.MeetingPlatform", "MeetingPlatform")
                        .WithMany("Meetings")
                        .HasForeignKey("MeetingPlatformId");

                    b.HasOne("MeetingApplication.Entities.MeetingReport", "MeetingReport")
                        .WithOne("Meeting")
                        .HasForeignKey("MeetingApplication.Entities.Meeting", "MeetingReportId");

                    b.HasOne("MeetingApplication.Entities.MeetingSubject", "MeetingSubject")
                        .WithMany("Meetings")
                        .HasForeignKey("MeetingSubjectId");

                    b.Navigation("MeetingPlatform");

                    b.Navigation("MeetingReport");

                    b.Navigation("MeetingSubject");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingPerson", b =>
                {
                    b.HasOne("MeetingApplication.Entities.Meeting", "Meeting")
                        .WithMany("MeetingPersons")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingApplication.Entities.Person", "Person")
                        .WithMany("MeetingPersons")
                        .HasForeignKey("TcNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MeetingApplication.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingPersons");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingPlatform", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingReport", b =>
                {
                    b.Navigation("Meeting")
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingApplication.Entities.MeetingSubject", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("MeetingApplication.Entities.Person", b =>
                {
                    b.Navigation("MeetingPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
